#!/usr/bin/env node
'use strict'

import * as logger from '../dist/esm/index.js'
import fs from 'fs'
import colors from 'colors/safe.js'
import { Command } from 'commander/esm.mjs'

const program = new Command()
program
    .usage('[options] <file ...>')
    .version("2.0.0")
    .option('-i, --indent [indent]', 'Space per indent', parseInt)
    .option('-n, --noColor', 'Disable color')
    .option('-d, --depth [depth]', 'Max depth inspection', parseInt)
    .parse(process.argv)

const options = {
    indentationLength: program.indent,
    noColor: program.noColor,
    maxDepth: program.depth
}

const renderInput = function (data) {
    let input = data
    try {
        input = JSON.parse(data)
    } catch (e) {

        if (program.debug) console.error(`${colors.red('Error:')} unparsable content`) //eslint-disable-line no-console
    }
    var lgr = new logger()
    console.log(lgr.info(input, options)) //eslint-disable-line no-console
}

if (program.args.length) {
    // First parameter is the file to read and parse
    const filename = program.args[0]
    try {
        renderInput(fs.readFileSync(filename, 'utf8')) //eslint-disable-line no-sync
    } catch (e) {
        console.error(`${colors.red('Error:')} File ${filename} does not exist`) //eslint-disable-line no-console
        process.exit(1) //eslint-disable-line no-process-exit
    }
} else {
    // Read input stream

    let streamData = ''

    process.stdin.resume()
    process.stdin.setEncoding('utf8')
    process.stdin.on('data', (chunk) => {
        if (chunk === '\n') {
            renderInput(streamData)
            streamData = ''
            return
        }
        streamData += chunk
    })
    process.stdin.on('end', () => {
        renderInput(streamData)
    })
}